<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog</title>
    <link>https://ChinaXhm.github.io/</link>
    <description>Recent content on Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 13 Dec 2019 23:05:56 +0800</lastBuildDate>
    
	<atom:link href="https://ChinaXhm.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>List</title>
      <link>https://ChinaXhm.github.io/list/</link>
      <pubDate>Fri, 13 Dec 2019 23:05:56 +0800</pubDate>
      
      <guid>https://ChinaXhm.github.io/list/</guid>
      <description>链表(C语言) 1.节点定义 typedef char datatype;typedef struct node{node *next;datatype data;}N;//起别名2.创建链表 N *creatlist(){N *head,*p;head=(N *)malloc(sizeof(N));if(head==NULL){printf(&amp;#34;动态内存分配失败&amp;#34;);return 0;}else{//采用尾插法建表 	int n,i;p=head;printf(&amp;#34;请输入节点个数:&amp;#34;);scanf(&amp;#34;%d&amp;#34;,&amp;amp;n);for(i=0;i&amp;lt;n;i++){N *node=(N *)malloc(sizeof(N));node-&amp;gt;next=NULL;printf(&amp;#34;请输入%d个节点的值:&amp;#34;,i);getchar() ;node-&amp;gt;data=getchar();p-&amp;gt;next=node;p=node;}}return head;}3.输出链表 void output(N *head){int length=0;if(head-&amp;gt;next!=NULL){printf(&amp;#34;输出结果为&amp;#34;);N *a=head-&amp;gt;next;	while(a!=NULL) {printf(&amp;#34;%c &amp;#34;,a-&amp;gt;data);a=a-&amp;gt;next;length++;}}else{printf(&amp;#34;空表\n&amp;#34;);}	printf(&amp;#34;\n当前表长为:%d\n&amp;#34;,length);}4.</description>
    </item>
    
    <item>
      <title>Array</title>
      <link>https://ChinaXhm.github.io/array/</link>
      <pubDate>Thu, 12 Dec 2019 21:26:24 +0800</pubDate>
      
      <guid>https://ChinaXhm.github.io/array/</guid>
      <description>前言  数组是最基本的数据结构, 基本上所有的编程语言都自带数组的使用, 数组是线性表的顺序存储结构, 线性表是逻辑上的, 顺序存储是物理上的, 数组使用起来很方便, 有它的优点, 但是也有它的缺点, 优点是可以根据下标得到和删除元素, 但是很难插入元素, 接下来我们来看看数组的操作, 分两个版本, C和Golang
 C  增加(插入)
 1.在数组末尾添加元素
  int add(int nums[],int *numsSize,int value)//直接放在数组最后面 { nums[*numsSize]=value; *numsSize+=1; return *numsSize; }   2.在数组某位置(下标位置)添加
  int insert(int nums[],int *numsSize,int index,int value)//指定插入下标位置 { int i=0; if(index&amp;lt;0||index&amp;gt;*numsSize) { return 0; } for(i=*numsSize;i&amp;gt;=index;i--)//首先index 值后的元素全部后移，从最后一个元素开始 	//然后index位置插入值; 	{ nums[i+1]=nums[i]; } nums[index]=value; *numsSize+=1;//*numsSize++,自加一优先级比*高 	return 1; }  Golang </description>
    </item>
    
  </channel>
</rss>